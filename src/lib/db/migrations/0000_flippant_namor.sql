CREATE TABLE IF NOT EXISTS "user_orders" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "user_orders_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"user_id" text DEFAULT (auth.user_id()) NOT NULL,
	"product_name" text NOT NULL,
	"dealer" varchar(255) NOT NULL,
	"buy_date" date NOT NULL,
	"price" numeric(10, 2) NOT NULL,
	"state" varchar(50) NOT NULL,
	"order_number" varchar(255),
	"inserted_at" timestamp with time zone DEFAULT now() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT now() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "user_orders" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "user_profiles" (
	"user_id" text PRIMARY KEY NOT NULL,
	"name" varchar(255) NOT NULL
);
--> statement-breakpoint
CREATE POLICY "crud-authenticated-policy-select" ON "user_orders" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((select auth.user_id() = "user_orders"."user_id"));--> statement-breakpoint
CREATE POLICY "crud-authenticated-policy-insert" ON "user_orders" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK ((select auth.user_id() = "user_orders"."user_id"));--> statement-breakpoint
CREATE POLICY "crud-authenticated-policy-update" ON "user_orders" AS PERMISSIVE FOR UPDATE TO "authenticated" USING ((select auth.user_id() = "user_orders"."user_id")) WITH CHECK ((select auth.user_id() = "user_orders"."user_id"));--> statement-breakpoint
CREATE POLICY "crud-authenticated-policy-delete" ON "user_orders" AS PERMISSIVE FOR DELETE TO "authenticated" USING ((select auth.user_id() = "user_orders"."user_id"));